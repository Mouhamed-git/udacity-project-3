{"ast":null,"code":"import _asyncToGenerator from \"/home/md/T\\xE9l\\xE9chargements/udacity/Project3/udacity-project-3/udagram-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, e as createEvent, h, H as Host, i as getElement } from './index-1a99aeb7.js';\nimport { b as getIonMode } from './ionic-global-04e268e7.js';\nimport { r as raf, g as getElementRoot } from './helpers-4d272360.js';\nimport { a as hapticSelectionStart, b as hapticSelectionChanged, h as hapticSelectionEnd } from './haptic-683b3b3c.js';\nimport { c as createColorClasses } from './theme-7670341c.js';\nconst pickerColumnInternalIosCss = \":host{padding-left:16px;padding-right:16px;padding-top:0px;padding-bottom:0px;height:200px;outline:none;font-size:22px;-webkit-scroll-snap-type:y mandatory;-ms-scroll-snap-type:y mandatory;scroll-snap-type:y mandatory;overflow-x:hidden;overflow-y:scroll;scrollbar-width:none;text-align:center}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host{padding-left:unset;padding-right:unset;-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px}}:host::-webkit-scrollbar{display:none}:host .picker-item{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;display:block;width:100%;height:34px;border:0px;outline:none;background:transparent;color:inherit;font-size:inherit;line-height:34px;text-align:inherit;text-overflow:ellipsis;white-space:nowrap;cursor:pointer;overflow:hidden;scroll-snap-align:center}:host .picker-item-empty,:host .picker-item.picker-item-disabled{scroll-snap-align:none;cursor:default}:host .picker-item.picker-item-disabled{opacity:0.4}:host(.picker-column-active) .picker-item.picker-item-active{color:var(--ion-color-base)}@media (any-hover: hover){:host(:focus){outline:none;background:rgba(var(--ion-color-base-rgb), 0.2)}}\";\nconst pickerColumnInternalMdCss = \":host{padding-left:16px;padding-right:16px;padding-top:0px;padding-bottom:0px;height:200px;outline:none;font-size:22px;-webkit-scroll-snap-type:y mandatory;-ms-scroll-snap-type:y mandatory;scroll-snap-type:y mandatory;overflow-x:hidden;overflow-y:scroll;scrollbar-width:none;text-align:center}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host{padding-left:unset;padding-right:unset;-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px}}:host::-webkit-scrollbar{display:none}:host .picker-item{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;display:block;width:100%;height:34px;border:0px;outline:none;background:transparent;color:inherit;font-size:inherit;line-height:34px;text-align:inherit;text-overflow:ellipsis;white-space:nowrap;cursor:pointer;overflow:hidden;scroll-snap-align:center}:host .picker-item-empty,:host .picker-item.picker-item-disabled{scroll-snap-align:none;cursor:default}:host .picker-item.picker-item-disabled{opacity:0.4}:host(.picker-column-active) .picker-item.picker-item-active{color:var(--ion-color-base)}@media (any-hover: hover){:host(:focus){outline:none;background:rgba(var(--ion-color-base-rgb), 0.2)}}:host .picker-item-active{color:var(--ion-color-base)}\";\nconst PickerColumnInternal = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionChange = createEvent(this, \"ionChange\", 7);\n    this.isScrolling = false;\n    this.isColumnVisible = false;\n    this.isActive = false;\n    /**\n     * A list of options to be displayed in the picker\n     */\n\n    this.items = [];\n    /**\n     * The color to use from your application's color palette.\n     * Default options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\n     * For more information on colors, see [theming](/docs/theming/basics).\n     */\n\n    this.color = 'primary';\n    /**\n     * If `true`, tapping the picker will\n     * reveal a number input keyboard that lets\n     * the user type in values for each picker\n     * column. This is useful when working\n     * with time pickers.\n     *\n     * @internal\n     */\n\n    this.numericInput = false;\n\n    this.centerPickerItemInView = (target, smooth = true) => {\n      const {\n        el,\n        isColumnVisible\n      } = this;\n\n      if (isColumnVisible) {\n        // (Vertical offset from parent) - (three empty picker rows) + (half the height of the target to ensure the scroll triggers)\n        const top = target.offsetTop - 3 * target.clientHeight + target.clientHeight / 2;\n\n        if (el.scrollTop !== top) {\n          el.scroll({\n            top,\n            left: 0,\n            behavior: smooth ? 'smooth' : undefined\n          });\n        }\n      }\n    };\n    /**\n     * When ionInputModeChange is emitted, each column\n     * needs to check if it is the one being made available\n     * for text entry.\n     */\n\n\n    this.inputModeChange = ev => {\n      if (!this.numericInput) {\n        return;\n      }\n\n      const {\n        useInputMode,\n        inputModeColumn\n      } = ev.detail;\n      /**\n       * If inputModeColumn is undefined then this means\n       * all numericInput columns are being selected.\n       */\n\n      const isColumnActive = inputModeColumn === undefined || inputModeColumn === this.el;\n\n      if (!useInputMode || !isColumnActive) {\n        this.setInputModeActive(false);\n        return;\n      }\n\n      this.setInputModeActive(true);\n    };\n    /**\n     * Setting isActive will cause a re-render.\n     * As a result, we do not want to cause the\n     * re-render mid scroll as this will cause\n     * the picker column to jump back to\n     * whatever value was selected at the\n     * start of the scroll interaction.\n     */\n\n\n    this.setInputModeActive = state => {\n      if (this.isScrolling) {\n        this.scrollEndCallback = () => {\n          this.isActive = state;\n        };\n\n        return;\n      }\n\n      this.isActive = state;\n    };\n    /**\n     * When the column scrolls, the component\n     * needs to determine which item is centered\n     * in the view and will emit an ionChange with\n     * the item object.\n     */\n\n\n    this.initializeScrollListener = () => {\n      const {\n        el\n      } = this;\n      let timeout;\n      let activeEl = this.activeItem;\n\n      const scrollCallback = () => {\n        raf(() => {\n          if (timeout) {\n            clearTimeout(timeout);\n            timeout = undefined;\n          }\n\n          if (!this.isScrolling) {\n            hapticSelectionStart();\n            this.isScrolling = true;\n          }\n          /**\n           * Select item in the center of the column\n           * which is the month/year that we want to select\n           */\n\n\n          const bbox = el.getBoundingClientRect();\n          const centerX = bbox.x + bbox.width / 2;\n          const centerY = bbox.y + bbox.height / 2;\n          const activeElement = el.shadowRoot.elementFromPoint(centerX, centerY);\n\n          if (activeEl !== null) {\n            activeEl.classList.remove(PICKER_COL_ACTIVE);\n          }\n\n          if (activeElement.disabled) {\n            return;\n          }\n          /**\n           * If we are selecting a new value,\n           * we need to run haptics again.\n           */\n\n\n          if (activeElement !== activeEl) {\n            hapticSelectionChanged();\n          }\n\n          activeEl = activeElement;\n          activeElement.classList.add(PICKER_COL_ACTIVE);\n          timeout = setTimeout(() => {\n            this.isScrolling = false;\n            hapticSelectionEnd();\n            /**\n             * Certain tasks (such as those that\n             * cause re-renders) should only be done\n             * once scrolling has finished, otherwise\n             * flickering may occur.\n             */\n\n            const {\n              scrollEndCallback\n            } = this;\n\n            if (scrollEndCallback) {\n              scrollEndCallback();\n              this.scrollEndCallback = undefined;\n            }\n\n            const dataIndex = activeElement.getAttribute('data-index');\n            /**\n             * If no value it is\n             * possible we hit one of the\n             * empty padding columns.\n             */\n\n            if (dataIndex === null) {\n              return;\n            }\n\n            const index = parseInt(dataIndex, 10);\n            const selectedItem = this.items[index];\n\n            if (selectedItem.value !== this.value) {\n              this.setValue(selectedItem.value);\n            }\n          }, 250);\n        });\n      };\n      /**\n       * Wrap this in an raf so that the scroll callback\n       * does not fire when component is initially shown.\n       */\n\n\n      raf(() => {\n        el.addEventListener('scroll', scrollCallback);\n\n        this.destroyScrollListener = () => {\n          el.removeEventListener('scroll', scrollCallback);\n        };\n      });\n    };\n  }\n\n  itemsChange(currentItems, previousItems) {\n    const {\n      value\n    } = this;\n    /**\n     * When the items change, it is possible for the item\n     * that was selected to no longer exist. In that case, we need\n     * to automatically select the nearest item. If we do not,\n     * then the scroll position will be reset to zero and it will\n     * look like the first item was automatically selected.\n     *\n     * If we cannot find a closest item then we do nothing, and\n     * the browser will reset the scroll position to 0.\n     */\n\n    const findCurrentItem = currentItems.find(item => item.value === value);\n\n    if (!findCurrentItem) {\n      /**\n       * The default behavior is to assume\n       * that the new set of data is similar to the old\n       * set of data, just with some items filtered out.\n       * We walk backwards through the data to find the\n       * closest enabled picker item and select it.\n       *\n       * Developers can also swap the items out for an entirely\n       * new set of data. In that case, the value we select\n       * here likely will not make much sense. For this use case,\n       * developers should update the `value` prop themselves\n       * when swapping out the data.\n       */\n      const findPreviousItemIndex = previousItems.findIndex(item => item.value === value);\n\n      if (findPreviousItemIndex === -1) {\n        return;\n      }\n      /**\n       * Step through the current items backwards\n       * until we find a neighbor we can select.\n       * We start at the last known location of the\n       * current selected item in order to\n       * account for data that has been added. This\n       * search prioritizes stability in that it\n       * tries to keep the scroll position as close\n       * to where it was before the update.\n       * Before Items: ['a', 'b', 'c'], Selected Value: 'b'\n       * After Items:  ['a', 'dog', 'c']\n       * Even though 'dog' is a different item than 'b',\n       * it is the closest item we can select while\n       * preserving the scroll position.\n       */\n\n\n      let nearestItem;\n\n      for (let i = findPreviousItemIndex; i >= 0; i--) {\n        const item = currentItems[i];\n\n        if (item !== undefined && item.disabled !== true) {\n          nearestItem = item;\n          break;\n        }\n      }\n\n      if (nearestItem) {\n        this.setValue(nearestItem.value);\n        return;\n      }\n    }\n  }\n\n  valueChange() {\n    if (this.isColumnVisible) {\n      /**\n       * Only scroll the active item into view when the picker column\n       * is actively visible to the user.\n       */\n      this.scrollActiveItemIntoView();\n    }\n  }\n  /**\n   * Only setup scroll listeners\n   * when the picker is visible, otherwise\n   * the container will have a scroll\n   * height of 0px.\n   */\n\n\n  componentWillLoad() {\n    const visibleCallback = entries => {\n      var _a;\n\n      const ev = entries[0];\n\n      if (ev.isIntersecting) {\n        this.isColumnVisible = true;\n        /**\n         * Because this initial call to scrollActiveItemIntoView has to fire before\n         * the scroll listener is set up, we need to manage the active class manually.\n         */\n\n        const oldActive = getElementRoot(this.el).querySelector(`.${PICKER_COL_ACTIVE}`);\n        oldActive === null || oldActive === void 0 ? void 0 : oldActive.classList.remove(PICKER_COL_ACTIVE);\n        this.scrollActiveItemIntoView();\n        (_a = this.activeItem) === null || _a === void 0 ? void 0 : _a.classList.add(PICKER_COL_ACTIVE);\n        this.initializeScrollListener();\n      } else {\n        this.isColumnVisible = false;\n\n        if (this.destroyScrollListener) {\n          this.destroyScrollListener();\n          this.destroyScrollListener = undefined;\n        }\n      }\n    };\n\n    new IntersectionObserver(visibleCallback, {\n      threshold: 0.001\n    }).observe(this.el);\n    const parentEl = this.el.closest('ion-picker-internal');\n\n    if (parentEl !== null) {\n      parentEl.addEventListener('ionInputModeChange', ev => this.inputModeChange(ev));\n    }\n  }\n\n  componentDidRender() {\n    var _a;\n\n    const {\n      activeItem,\n      items,\n      isColumnVisible,\n      value\n    } = this;\n\n    if (isColumnVisible) {\n      if (activeItem) {\n        this.scrollActiveItemIntoView();\n      } else if (((_a = items[0]) === null || _a === void 0 ? void 0 : _a.value) !== value) {\n        /**\n         * If the picker column does not have an active item and the current value\n         * does not match the first item in the picker column, that means\n         * the value is out of bounds. In this case, we assign the value to the\n         * first item to match the scroll position of the column.\n         *\n         */\n        this.setValue(items[0].value);\n      }\n    }\n  }\n  /** @internal  */\n\n\n  scrollActiveItemIntoView() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const activeEl = _this.activeItem;\n\n      if (activeEl) {\n        _this.centerPickerItemInView(activeEl, false);\n      }\n    })();\n  }\n  /**\n   * Sets the value prop and fires the ionChange event.\n   * This is used when we need to fire ionChange from\n   * user-generated events that cannot be caught with normal\n   * input/change event listeners.\n   * @internal\n   */\n\n\n  setValue(value) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        items\n      } = _this2;\n      _this2.value = value;\n      const findItem = items.find(item => item.value === value && item.disabled !== true);\n\n      if (findItem) {\n        _this2.ionChange.emit(findItem);\n      }\n    })();\n  }\n\n  get activeItem() {\n    return getElementRoot(this.el).querySelector(`.picker-item[data-value=\"${this.value}\"]:not([disabled])`);\n  }\n\n  render() {\n    const {\n      items,\n      color,\n      isActive,\n      numericInput\n    } = this;\n    const mode = getIonMode(this);\n    return h(Host, {\n      tabindex: 0,\n      class: createColorClasses(color, {\n        [mode]: true,\n        ['picker-column-active']: isActive,\n        ['picker-column-numeric-input']: numericInput\n      })\n    }, h(\"div\", {\n      class: \"picker-item picker-item-empty\"\n    }, \"\\u00A0\"), h(\"div\", {\n      class: \"picker-item picker-item-empty\"\n    }, \"\\u00A0\"), h(\"div\", {\n      class: \"picker-item picker-item-empty\"\n    }, \"\\u00A0\"), items.map((item, index) => {\n      return h(\"button\", {\n        tabindex: \"-1\",\n        class: {\n          'picker-item': true,\n          'picker-item-disabled': item.disabled || false\n        },\n        \"data-value\": item.value,\n        \"data-index\": index,\n        onClick: ev => {\n          this.centerPickerItemInView(ev.target);\n        },\n        disabled: item.disabled\n      }, item.text);\n    }), h(\"div\", {\n      class: \"picker-item picker-item-empty\"\n    }, \"\\u00A0\"), h(\"div\", {\n      class: \"picker-item picker-item-empty\"\n    }, \"\\u00A0\"), h(\"div\", {\n      class: \"picker-item picker-item-empty\"\n    }, \"\\u00A0\"));\n  }\n\n  get el() {\n    return getElement(this);\n  }\n\n  static get watchers() {\n    return {\n      \"items\": [\"itemsChange\"],\n      \"value\": [\"valueChange\"]\n    };\n  }\n\n};\nconst PICKER_COL_ACTIVE = 'picker-item-active';\nPickerColumnInternal.style = {\n  ios: pickerColumnInternalIosCss,\n  md: pickerColumnInternalMdCss\n};\nexport { PickerColumnInternal as ion_picker_column_internal };","map":null,"metadata":{},"sourceType":"module"}